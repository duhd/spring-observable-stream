buildscript {
    ext.spring_boot_version = '1.5.7.RELEASE'
    ext.spring_version = '4.3.11.RELEASE'
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://dl.bintray.com/kotlin/exposed' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
}

apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'
apply plugin: 'idea'
apply plugin: 'application'
mainClassName = "net.corda.server.ServerKt"

//apply plugin: 'org.springframework.boot'
//apply plugin: 'kotlin-spring'

sourceSets {
    main {
        kotlin.srcDir "src/main/kotlin"
        resources.srcDir "src/main/resources"
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"
    compile "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"


    // Corda integration dependencies
  //  cordaCompile "$corda_release_group:corda-core:$corda_release_version"
  //  cordaCompile "$corda_release_group:corda-finance:$corda_release_version"
  //  cordaCompile "$corda_release_group:corda-jackson:$corda_release_version"
  //  cordaCompile "$corda_release_group:corda-rpc:$corda_release_version"
  //  cordaRuntime "$corda_release_group:corda:$corda_release_version"
  //  testCompile "$corda_release_group:corda-node-driver:$corda_release_version"
    compile fileTree(dir: '../libs', include: '*.jar')
    compile("org.springframework.boot:spring-boot-starter-websocket:$spring_boot_version") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }
    compile "org.springframework.boot:spring-boot-starter-log4j2:$spring_boot_version"
    compile 'org.springframework:spring-web:5.0.2.RELEASE'
    compile "org.apache.logging.log4j:log4j-web:2.7"



    cordapp project(":obligation")
}


tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        languageVersion = "1.1"
        apiVersion = "1.1"
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}

jar{
    baseName = 'obligation-api'
    version = '0.1.0'
    mainClassName = "net.corda.server.ServerKt"
    manifest {
        attributes(
                'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': 'net.corda.server.ServerKt'
        )
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    }
}


task runWebServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.corda.server.ServerKt'
    environment "server.port", "80"
    environment "config.rpc.port", "10002"
}

task runPartyAServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.corda.server.ServerKt'
    environment "server.port", "8080"
    environment "config.rpc.port", "10006"
}

task runPartyBServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.corda.server.ServerKt'
    environment "server.port", "8081"
    environment "config.rpc.port", "10009"
}